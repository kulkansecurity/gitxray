{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Gitxray \uf0c1 Gitxray (short for Git X-Ray) is a multifaceted security tool designed for use on GitHub repositories. It can serve many purposes, including OSINT and Forensics. gitxray leverages public GitHub REST APIs to gather information that would otherwise be very time-consuming to obtain manually. Additionally, it seeks out information in unconventional places. The Octocat getting X-Rayed What is it for? \uf0c1 Identifying threat actors in a Repository. You may spot co-owned or shared accounts , as well as inspect public events to spot fake Stargazers . Forensics use-cases, such as finding out what else happened on the day of an Incident . Finding sensitive information in contributor profiles disclosed by accident within, for example, Armored PGP Keys, or Key Names. Collecting email addresses and analyzing contributor accounts belonging to GitHub organizations and repositories. Identifying fake or infected Repositories. It can detect tampered commit dates as well as, for example, Release assets updated post-release . And so. much. more. Getting started \uf0c1 Installing Gitxray Features \ud83d\udcab Rate Limits and the GitHub API \uf0c1 Gitxray gracefully handles Rate Limits and can work out of the box without a GitHub API key, but you'll likely hit RateLimits pretty fast. This is detailed by GitHub in their documentation here . A simple read-only token created for PUBLIC repositories will however help you increase those restrictions considerably. If you're not in a hurry or can leave gitxray running you'll be able to use its full capacity, as it pauses execution while waiting for the limits to lift. License \uf0c1 gitxray is provided under the terms and conditions of the GNU Affero GPL v3 License .","title":"Welcome to Gitxray"},{"location":"#welcome-to-gitxray","text":"Gitxray (short for Git X-Ray) is a multifaceted security tool designed for use on GitHub repositories. It can serve many purposes, including OSINT and Forensics. gitxray leverages public GitHub REST APIs to gather information that would otherwise be very time-consuming to obtain manually. Additionally, it seeks out information in unconventional places. The Octocat getting X-Rayed","title":"Welcome to Gitxray"},{"location":"#what-is-it-for","text":"Identifying threat actors in a Repository. You may spot co-owned or shared accounts , as well as inspect public events to spot fake Stargazers . Forensics use-cases, such as finding out what else happened on the day of an Incident . Finding sensitive information in contributor profiles disclosed by accident within, for example, Armored PGP Keys, or Key Names. Collecting email addresses and analyzing contributor accounts belonging to GitHub organizations and repositories. Identifying fake or infected Repositories. It can detect tampered commit dates as well as, for example, Release assets updated post-release . And so. much. more.","title":"What is it for?"},{"location":"#getting-started","text":"Installing Gitxray Features \ud83d\udcab","title":"Getting started"},{"location":"#rate-limits-and-the-github-api","text":"Gitxray gracefully handles Rate Limits and can work out of the box without a GitHub API key, but you'll likely hit RateLimits pretty fast. This is detailed by GitHub in their documentation here . A simple read-only token created for PUBLIC repositories will however help you increase those restrictions considerably. If you're not in a hurry or can leave gitxray running you'll be able to use its full capacity, as it pauses execution while waiting for the limits to lift.","title":"Rate Limits and the GitHub API"},{"location":"#license","text":"gitxray is provided under the terms and conditions of the GNU Affero GPL v3 License .","title":"License"},{"location":"code_structure/","text":"Code structure \uf0c1 A few pointers on how the Gitxray codebase is structured: gitxray.py - The main script, creates a gx_context, gx_output and calls X-Ray modules. The include directory has files split in two naming conventions: Suffix: gh_ - Files that handle GitHub API responses or talk to the GitHub API Suffix: gx_ - Files with more Gitxray-specific logic Some of the supporting files in the include directory: gx_context.py - Holds a context of data that is shared across different X-Ray modules and through out execution. gx_output.py - Takes care of any console printing, as well as text and json output. For parsing SSH and PGP signatures, we wrote our own code and placed it in: gx_ugly_openpgp_parser.py - Parses Armors and BLOBs based on RFC4880 gx_ugly_ssh_parser.py - Parses (if you can call that Parsing) SSH Armors and BLOBs Finally, last but not least important, the X-Rays under the xrays directory: contributors_xray.py - Handles all Contributor-related data and decides what to log. repository_xray.py - Handles all Repository-related data and decides what to log. workflows_xray.py - Handles all Workflow-related analysis and decides what to log. associations_xray.py - Analyzes and reports all associations carried from prior X-Ray modules.","title":"Code structure"},{"location":"code_structure/#code-structure","text":"A few pointers on how the Gitxray codebase is structured: gitxray.py - The main script, creates a gx_context, gx_output and calls X-Ray modules. The include directory has files split in two naming conventions: Suffix: gh_ - Files that handle GitHub API responses or talk to the GitHub API Suffix: gx_ - Files with more Gitxray-specific logic Some of the supporting files in the include directory: gx_context.py - Holds a context of data that is shared across different X-Ray modules and through out execution. gx_output.py - Takes care of any console printing, as well as text and json output. For parsing SSH and PGP signatures, we wrote our own code and placed it in: gx_ugly_openpgp_parser.py - Parses Armors and BLOBs based on RFC4880 gx_ugly_ssh_parser.py - Parses (if you can call that Parsing) SSH Armors and BLOBs Finally, last but not least important, the X-Rays under the xrays directory: contributors_xray.py - Handles all Contributor-related data and decides what to log. repository_xray.py - Handles all Repository-related data and decides what to log. workflows_xray.py - Handles all Workflow-related analysis and decides what to log. associations_xray.py - Analyzes and reports all associations carried from prior X-Ray modules.","title":"Code structure"},{"location":"features/","text":"Features \ud83d\udcab \uf0c1 Because of the amount of data it analyzes, gitxray can be a bit overwhelming at first. Let's look at a few examples of potential awesome findings which can better explain why you're here and why gitxray is awesome \u2665. A user-friendly HTML report \ud83d\udcca \uf0c1 gitxray now offers a default output format of html , creating a Bootstrap -backed HTML report which offers easy navigation through Repository, Contributor and non-Contributor results. Unintended disclosures in Contributor profiles \ud83d\udc40 \uf0c1 gitxray reports under a user_input category any user-supplied data that repository Contributors may have exposed via their GitHub accounts inadevertently. This is normally the case of PGP and SSH key name fields, which unfortunately are used by Users to record hostnames, computer models, password locations (e.g. in 1Password), or even the password itself to a given key (which we all know might be the same password used elsewhere). To make things more interesting, gitxray also identifies any \"excess\" data found before, or after, PGP Armored keys published in a User's GitHub account. Wondering what that data normally is? Erroneous copy/pastes from the command line while exporting in ASCII/Armored format their keys. And what might that contain? Most of the times, a shell prompt revealing a local username, a hostname and a directory path. May I remind you all of this data is Public-facing. You may focus specifically on these types of findings by filtering results with: gitxray -o https://github.com/SampleOrg -f user_input or, for a specific repository: gitxray -r https://github.com/SampleOrg/SampleRepo -f user_input Spotting shared, co-owned or fake Contributors \ud83d\udc7b \uf0c1 Open source projects are under attack, with malicious actors hiding in plain sight. GitHub has released a Security alert describing one of potentially many modus-operandi adopted by Threat actors. So why not panic (a bit) and see if there's anything you could do to help protect the repositories you care about? gitxray reports under the association category information that could help identify cases of suspicious activity or identity. By fingerprinting Keys added to a profile, as well as those historically used to sign a commit, and by looking at, for example, key and account creation times, it becomes possible to cross-reference the data and link (hence 'association') the behavior to 2 or more accounts. You can focus specifically on association findings by filtering for association with: gitxray -o https://github.com/SampleOrg -f association or targetting a specific Repository with: gitxray -r https://github.com/SampleOrg/SampleRepo -f association Important \uf0c1 Associations MUST NOT be directly and blindly used to report fake or shadow accounts. They are automatic observations from a piece of well-intended code. Do NOT treat association results as findings directly. We must protect open-source projects by first and foremost respecting open-source developers. Ensure that any actions taken are thoughtful and based on solid evidence, not just automated associations. Duplicate Repository Name Check \ud83d\udee1 \uf0c1 gitxray will always check and detect duplicate repository names across different organizations and user profiles. This helps identify potential cloned or fake repositories. gitxray compares your target repository against others with the same name and the highest star count, ensuring you are engaging with the most popular (and likely legitimate) one. Forensics: What happened on the day of an incident? \ud83d\udd0d \uf0c1 Because gitxray collects data from multiple sources of activity including Commits, Comments, Workflow Runs, Issues, Deployments and more; and because gitxray shows activity in a standarized YYYY-MM-DD format, it becomes possible to use Filtering in order to place focus on specific activity happening at a specific point in time. For example, by running gitxray with the following arguments, only results from that specific date are returned. You may place focus on a day, or even a month: gitxray -r https://github.com/SampleOrg/SampleRepo -f 2024-08 -outformat text gitxray -r https://github.com/SampleOrg/SampleRepo -f 2024-09-01 -outformat text An outformat of type text can help in this specific use-case more than the defaul html report. Analyzing Commit Hours to Identify Anomalies \ud83d\udd5b \uf0c1 gitxray provides a summary of contributor commit hours, allowing you to profile contributor activity and detect potential anomalies. This feature helps you understand typical patterns and flag unusual behavior for further investigation. Untrustworthy Repositories and Activity \ud83c\udff4 \uf0c1 gitxray can be used to protect yourself, your team and your customers from fake Repositories and suspicious activity. For example, by analyzing commit dates and comparing them to the account creation timestamp of contributors, gitxray can flag inconsistencies that may indicate: Tampered Commits: Some repositories may be manipulated to appear older than they actually are, such as claiming that all commits date back six years when the repository was only created a week ago. This tactic is often used to increase perceived value. Unfortunately, altering commit dates is relatively easy in Git, and GitHub is no exception. More on this here . Reclaimed Usernames: Trusted contributors might have had their accounts deleted and then re-registered by malicious actors. GitHub allows a username to be re-released after 90 days, making this a possible attack vector. Learn more about GitHub\u2019s account deletion policy here . It is possible to focus on unreliable historic activity by filtering for Warning keywords: gitxray -o https://github.com/SampleOrg -f warning X-Raying GitHub Workflows \u2699 \uf0c1 The Workflows X-Ray module is executed upon identifying existing Workflows or Actions. gitxray provides in-depth analysis and monitoring of GitHub workflows, including: Execution Analysis: Provides detailed insights into workflow execution, showing how many times each workflow was executed by contributors and non-contributors. This allows for better understanding of usage patterns and detection of unauthorized or unexpected activity. Detection of deleted runs: This feature helps identify whether workflow runs have been deleted, potentially indicating an attempt to erase traces of malicious activity or legitimate maintenance actions. Security Checks for Workflows: Performs a series of basic security checks on workflows to identify uses of Secrets, Self-hosted Runners and Potentially dangerous triggers (eg pull_request_target) that could pose a security risk. Disclaimer: Gitxray is NOT a complete Workflow Security Scanner \uf0c1 For more information on tools which are specialized in scanning Workflows refer to our Vulnerable Workflows section . The PR Rejection Awards \ud83c\udfc6 \uf0c1 Another gitxray feature is the ability to list a TOP 3 of GitHub accounts that have tried to submit Pull Requests to the repository, which ended up closed AND NOT merged. In certain emotional scenarios, this could be paraphrased as rejected PRs . Kidding aside, in some cases, this could lead to identifying Contributors who have repeatedly failed at merging a very evidently unaligned piece of code to a branch (I know, it sounds unlikely for an account to try and merge backdoor.py repeatedly... but is it?). gitxray will show a TOP 3 list specific to Repository Contributors and a separate list for accounts which are NOT Contributors to the Repository. These findings, if any exist, are reported under a contributors category along with additional information related to other Repository Contributors. You can focus specifically on findings from the contributors category by filtering for contributors with: gitxray -o https://github.com/SampleOrg -f contributors or targetting a specific Repository with: gitxray -r https://github.com/SampleOrg/SampleRepo -f contributors Fake Starring, Private repos gone Public and more \ud83d\ude48 \uf0c1 GitHub shares publicly up to 90 days of past Events for any User account, which include actions such as Repository creation, Watching, Committing, Pull Requesting, and more. gitxray includes these events under a 90d_events category in the results included for each Contributor. For example, Events you may come across that would be interesting include: A user having very recently switched a repository from PRIVATE to PUBLIC . GitHub requires Users to tick several boxes prior to moving an existing private repository to public, lowering the chances of an unintended leak; however, a recent public repository may not have had as much attention and auditing as you would think. A user starring (originally known as watching ) too many respositories too rapidly. This could be a tell of an account used for Stargazing . Or it could just be a normal human being in one of those days filled with anxiety. And more! To find Contributors who recently switched from Private to Public a repository or who have Starred repositories, you may start with: gitxray -o https://github.com/SampleOrg -f starred,private And you could then target a specific Repository Contributor to get more information: gitxray -r https://github.com/SampleOrg/SampleRepo -c some_user Lots of e-mail addresses \ud83d\udce7 and Profiling data \ud83d\udc64 \uf0c1 gitxray will report for each Contributor, an emails category listing all unique e-mail address collected from parsing: The User's profile Each commit made by the User PGP Primary Keys and PGP SubKeys Additionally, Personal Information (e.g. social networks) voluntarily made Public by the User is extracted from multiple sources including PGP Key BLOBs and reported under a personal category. Finally, the profiling category tends to display information related to the account itself (e.g. creation date, last updated, and more.) You may focus specifically on emails , personal , and profiling fields with: gitxray -o https://github.com/SampleOrg -f emails,personal,profiling or, for a specific repository, with: gitxray -r https://github.com/SampleOrg/SampleRepo -f emails,personal,profiling Looking out for malicious Releases and Assets \ud83d\udc41 \uf0c1 It is possible for Threat Actors to compromise credentials of a Repository Maintainer in order to deploy malware by silently updating released Assets (the typical package you would download when a Release includes downloadable Assets); which is why gitxray looks at all Repository Releases and informs of: Assets that were updated at least a day AFTER their release, which might lead to suggest they've been infected and/or tampered with. Or it could just be a maintainer fixing an asset without wanting to create a new release. Users who have historically created releases and/or uploaded assets, as well as the % vs. the total amount of releases or assets uploaded in the repository; which may allow you to flag potential suspicious activity. For example, you might notice an account which never created Releases before now uploading assets. All of this information is included by gitxray in a releases category, which means you can focus on those results (if any exist) with: gitxray -o https://github.com/SampleOrg -f releases Anonymous contributors \ud83d\udc41 \uf0c1 As stated in GitHub documentation , only the first 500 author email addresses in a Repository will link to actual GitHub users or accounts. The rest will appear as \"anonymous\" contributors without associated GitHub information. Additionally, when an author's email address in a commit is not associated with a GitHub account, the User will also be considered Anonymous. Lucky for us, gitxray also includes within its output the entire list of Anonymous contributors received from GitHub. The list is first processed to combine all variations of Names used by the author for a same e-mail, which means the list can also be pretty useful when, for example, executing OSINT. To filter for anonymous contributors, you may use: gitxray -o https://github.com/SampleOrg -f anonymous And so much more. \uf0c1 We've covered a large amount of use-cases for gitxray , yet we're nowhere finished. Start X-Raying today your favorite Organizations and Repositories and discover more ways of connecting dots.","title":"Features &#128171;"},{"location":"features/#features","text":"Because of the amount of data it analyzes, gitxray can be a bit overwhelming at first. Let's look at a few examples of potential awesome findings which can better explain why you're here and why gitxray is awesome \u2665.","title":"Features &#128171;"},{"location":"features/#a-user-friendly-html-report","text":"gitxray now offers a default output format of html , creating a Bootstrap -backed HTML report which offers easy navigation through Repository, Contributor and non-Contributor results.","title":"A user-friendly HTML report &#x1F4CA;"},{"location":"features/#unintended-disclosures-in-contributor-profiles","text":"gitxray reports under a user_input category any user-supplied data that repository Contributors may have exposed via their GitHub accounts inadevertently. This is normally the case of PGP and SSH key name fields, which unfortunately are used by Users to record hostnames, computer models, password locations (e.g. in 1Password), or even the password itself to a given key (which we all know might be the same password used elsewhere). To make things more interesting, gitxray also identifies any \"excess\" data found before, or after, PGP Armored keys published in a User's GitHub account. Wondering what that data normally is? Erroneous copy/pastes from the command line while exporting in ASCII/Armored format their keys. And what might that contain? Most of the times, a shell prompt revealing a local username, a hostname and a directory path. May I remind you all of this data is Public-facing. You may focus specifically on these types of findings by filtering results with: gitxray -o https://github.com/SampleOrg -f user_input or, for a specific repository: gitxray -r https://github.com/SampleOrg/SampleRepo -f user_input","title":"Unintended disclosures in Contributor profiles &#128064;"},{"location":"features/#spotting-shared-co-owned-or-fake-contributors","text":"Open source projects are under attack, with malicious actors hiding in plain sight. GitHub has released a Security alert describing one of potentially many modus-operandi adopted by Threat actors. So why not panic (a bit) and see if there's anything you could do to help protect the repositories you care about? gitxray reports under the association category information that could help identify cases of suspicious activity or identity. By fingerprinting Keys added to a profile, as well as those historically used to sign a commit, and by looking at, for example, key and account creation times, it becomes possible to cross-reference the data and link (hence 'association') the behavior to 2 or more accounts. You can focus specifically on association findings by filtering for association with: gitxray -o https://github.com/SampleOrg -f association or targetting a specific Repository with: gitxray -r https://github.com/SampleOrg/SampleRepo -f association","title":"Spotting shared, co-owned or fake Contributors &#128123;"},{"location":"features/#important","text":"Associations MUST NOT be directly and blindly used to report fake or shadow accounts. They are automatic observations from a piece of well-intended code. Do NOT treat association results as findings directly. We must protect open-source projects by first and foremost respecting open-source developers. Ensure that any actions taken are thoughtful and based on solid evidence, not just automated associations.","title":"Important"},{"location":"features/#duplicate-repository-name-check","text":"gitxray will always check and detect duplicate repository names across different organizations and user profiles. This helps identify potential cloned or fake repositories. gitxray compares your target repository against others with the same name and the highest star count, ensuring you are engaging with the most popular (and likely legitimate) one.","title":"Duplicate Repository Name Check &#128737;"},{"location":"features/#forensics-what-happened-on-the-day-of-an-incident","text":"Because gitxray collects data from multiple sources of activity including Commits, Comments, Workflow Runs, Issues, Deployments and more; and because gitxray shows activity in a standarized YYYY-MM-DD format, it becomes possible to use Filtering in order to place focus on specific activity happening at a specific point in time. For example, by running gitxray with the following arguments, only results from that specific date are returned. You may place focus on a day, or even a month: gitxray -r https://github.com/SampleOrg/SampleRepo -f 2024-08 -outformat text gitxray -r https://github.com/SampleOrg/SampleRepo -f 2024-09-01 -outformat text An outformat of type text can help in this specific use-case more than the defaul html report.","title":"Forensics: What happened on the day of an incident? &#128269;"},{"location":"features/#analyzing-commit-hours-to-identify-anomalies","text":"gitxray provides a summary of contributor commit hours, allowing you to profile contributor activity and detect potential anomalies. This feature helps you understand typical patterns and flag unusual behavior for further investigation.","title":"Analyzing Commit Hours to Identify Anomalies &#128347;"},{"location":"features/#untrustworthy-repositories-and-activity","text":"gitxray can be used to protect yourself, your team and your customers from fake Repositories and suspicious activity. For example, by analyzing commit dates and comparing them to the account creation timestamp of contributors, gitxray can flag inconsistencies that may indicate: Tampered Commits: Some repositories may be manipulated to appear older than they actually are, such as claiming that all commits date back six years when the repository was only created a week ago. This tactic is often used to increase perceived value. Unfortunately, altering commit dates is relatively easy in Git, and GitHub is no exception. More on this here . Reclaimed Usernames: Trusted contributors might have had their accounts deleted and then re-registered by malicious actors. GitHub allows a username to be re-released after 90 days, making this a possible attack vector. Learn more about GitHub\u2019s account deletion policy here . It is possible to focus on unreliable historic activity by filtering for Warning keywords: gitxray -o https://github.com/SampleOrg -f warning","title":"Untrustworthy Repositories and Activity &#127988;"},{"location":"features/#x-raying-github-workflows","text":"The Workflows X-Ray module is executed upon identifying existing Workflows or Actions. gitxray provides in-depth analysis and monitoring of GitHub workflows, including: Execution Analysis: Provides detailed insights into workflow execution, showing how many times each workflow was executed by contributors and non-contributors. This allows for better understanding of usage patterns and detection of unauthorized or unexpected activity. Detection of deleted runs: This feature helps identify whether workflow runs have been deleted, potentially indicating an attempt to erase traces of malicious activity or legitimate maintenance actions. Security Checks for Workflows: Performs a series of basic security checks on workflows to identify uses of Secrets, Self-hosted Runners and Potentially dangerous triggers (eg pull_request_target) that could pose a security risk.","title":"X-Raying GitHub Workflows &#9881;"},{"location":"features/#disclaimer-gitxray-is-not-a-complete-workflow-security-scanner","text":"For more information on tools which are specialized in scanning Workflows refer to our Vulnerable Workflows section .","title":"Disclaimer: Gitxray is NOT a complete Workflow Security Scanner"},{"location":"features/#the-pr-rejection-awards","text":"Another gitxray feature is the ability to list a TOP 3 of GitHub accounts that have tried to submit Pull Requests to the repository, which ended up closed AND NOT merged. In certain emotional scenarios, this could be paraphrased as rejected PRs . Kidding aside, in some cases, this could lead to identifying Contributors who have repeatedly failed at merging a very evidently unaligned piece of code to a branch (I know, it sounds unlikely for an account to try and merge backdoor.py repeatedly... but is it?). gitxray will show a TOP 3 list specific to Repository Contributors and a separate list for accounts which are NOT Contributors to the Repository. These findings, if any exist, are reported under a contributors category along with additional information related to other Repository Contributors. You can focus specifically on findings from the contributors category by filtering for contributors with: gitxray -o https://github.com/SampleOrg -f contributors or targetting a specific Repository with: gitxray -r https://github.com/SampleOrg/SampleRepo -f contributors","title":"The PR Rejection Awards &#127942;"},{"location":"features/#fake-starring-private-repos-gone-public-and-more","text":"GitHub shares publicly up to 90 days of past Events for any User account, which include actions such as Repository creation, Watching, Committing, Pull Requesting, and more. gitxray includes these events under a 90d_events category in the results included for each Contributor. For example, Events you may come across that would be interesting include: A user having very recently switched a repository from PRIVATE to PUBLIC . GitHub requires Users to tick several boxes prior to moving an existing private repository to public, lowering the chances of an unintended leak; however, a recent public repository may not have had as much attention and auditing as you would think. A user starring (originally known as watching ) too many respositories too rapidly. This could be a tell of an account used for Stargazing . Or it could just be a normal human being in one of those days filled with anxiety. And more! To find Contributors who recently switched from Private to Public a repository or who have Starred repositories, you may start with: gitxray -o https://github.com/SampleOrg -f starred,private And you could then target a specific Repository Contributor to get more information: gitxray -r https://github.com/SampleOrg/SampleRepo -c some_user","title":"Fake Starring, Private repos gone Public and more &#128584;"},{"location":"features/#lots-of-e-mail-addresses-and-profiling-data","text":"gitxray will report for each Contributor, an emails category listing all unique e-mail address collected from parsing: The User's profile Each commit made by the User PGP Primary Keys and PGP SubKeys Additionally, Personal Information (e.g. social networks) voluntarily made Public by the User is extracted from multiple sources including PGP Key BLOBs and reported under a personal category. Finally, the profiling category tends to display information related to the account itself (e.g. creation date, last updated, and more.) You may focus specifically on emails , personal , and profiling fields with: gitxray -o https://github.com/SampleOrg -f emails,personal,profiling or, for a specific repository, with: gitxray -r https://github.com/SampleOrg/SampleRepo -f emails,personal,profiling","title":"Lots of e-mail addresses &#128231; and Profiling data &#128100;"},{"location":"features/#looking-out-for-malicious-releases-and-assets","text":"It is possible for Threat Actors to compromise credentials of a Repository Maintainer in order to deploy malware by silently updating released Assets (the typical package you would download when a Release includes downloadable Assets); which is why gitxray looks at all Repository Releases and informs of: Assets that were updated at least a day AFTER their release, which might lead to suggest they've been infected and/or tampered with. Or it could just be a maintainer fixing an asset without wanting to create a new release. Users who have historically created releases and/or uploaded assets, as well as the % vs. the total amount of releases or assets uploaded in the repository; which may allow you to flag potential suspicious activity. For example, you might notice an account which never created Releases before now uploading assets. All of this information is included by gitxray in a releases category, which means you can focus on those results (if any exist) with: gitxray -o https://github.com/SampleOrg -f releases","title":"Looking out for malicious Releases and Assets &#128065;"},{"location":"features/#anonymous-contributors","text":"As stated in GitHub documentation , only the first 500 author email addresses in a Repository will link to actual GitHub users or accounts. The rest will appear as \"anonymous\" contributors without associated GitHub information. Additionally, when an author's email address in a commit is not associated with a GitHub account, the User will also be considered Anonymous. Lucky for us, gitxray also includes within its output the entire list of Anonymous contributors received from GitHub. The list is first processed to combine all variations of Names used by the author for a same e-mail, which means the list can also be pretty useful when, for example, executing OSINT. To filter for anonymous contributors, you may use: gitxray -o https://github.com/SampleOrg -f anonymous","title":"Anonymous contributors &#128065;"},{"location":"features/#and-so-much-more","text":"We've covered a large amount of use-cases for gitxray , yet we're nowhere finished. Start X-Raying today your favorite Organizations and Repositories and discover more ways of connecting dots.","title":"And so much more."},{"location":"gitxray_buzz/","text":"Gitxray Buzz \uf0c1 A section dedicated to Gitxray being mentioned in articles, blog posts and community discussions; or being included in OS distributions. Shout out to Fabian Affolter for adding Gitxray to NixOS. Gitxray is listed under the \" Intel and Repository Analysis Tools \" category in owasp.org. tl;dr's issue 262 presents Gitxray under the AppSec category ; cheers to Clint Gibler for an amazing infosec newsletter. Satori CI has added Gitxray under multiple Playbooks . Hands on With Gitxray : an Episode of the DevOps Paradox podcast , by Darin Pope and Viktor Farcic.","title":"Gitxray Buzz"},{"location":"gitxray_buzz/#gitxray-buzz","text":"A section dedicated to Gitxray being mentioned in articles, blog posts and community discussions; or being included in OS distributions. Shout out to Fabian Affolter for adding Gitxray to NixOS. Gitxray is listed under the \" Intel and Repository Analysis Tools \" category in owasp.org. tl;dr's issue 262 presents Gitxray under the AppSec category ; cheers to Clint Gibler for an amazing infosec newsletter. Satori CI has added Gitxray under multiple Playbooks . Hands on With Gitxray : an Episode of the DevOps Paradox podcast , by Darin Pope and Viktor Farcic.","title":"Gitxray Buzz"},{"location":"installing/","text":"Installing and Updating Gitxray \uf0c1 gitxray was written with no use of external package dependencies other than the requests library. PyPI (PIP) Way \uf0c1 gitxray is on PyPI and can be installed and updated with: pip install gitxray --upgrade Once installed, simply run gitxray from your command line by typing: gitxray -o https://github.com/SampleOrg or gitxray -r https://github.com/SampleOrg/SampleRepo Including https://github.com/ in the Repository or Organization is optional. Installing from source \uf0c1 You may also run gitxray directly by cloning or downloading its GitHub repository and running: python3 -m pip install -r requirements.txt cd src/ python3 -m gitxray.gitxray Creating an Access Token to increase Rate Limits \uf0c1 Gitxray gracefully handles Rate Limits and can work out of the box without a GitHub API token, but you'll likely hit RateLimits pretty fast (A small to medium-size repository with 10+ Contributors could take hours to complete while it waits for RateLimits to reset) This is detailed by GitHub in their documentation here . Creating a simple read-only token scoped to PUBLIC repositories will however help you increase those restrictions considerably. If you're not in a hurry or can leave gitxray running you'll be able to use its full capacity, as it pauses execution while waiting for the limits to lift. You may then load the token safely by using (prevents the token from being displayed on screen or getting logged in your shell history): read -rs GH_ACCESS_TOKEN export Command Line Arguments \uf0c1 Required Arguments \uf0c1 One of the following must be specified: -r, --repository [URL] - Specify a single repository URL to check. The URL must begin with https:// . Example : --repository https://github.com/example/repo -rf, --repositories-file [FILEPATH] - Provide a file path containing a list of repositories, each on a new line. The file must exist. Example : --repositories-file ./list_of_repos.txt -o, --organization [URL] - Specify an organization URL to check all repositories under that organization. The URL must begin with https:// . Example : --organization https://github.com/exampleOrg Optional Arguments \uf0c1 You'll find these optional but very handy in common gitxray usage. -l, --list - List contributors if a repository is specified or list repositories if an organization is specified. Useful for further focusing on specific entities. Example : --list -c, --contributor [USERNAMES] - A comma-separated list of GitHub usernames to focus on within the specified repository or organization. Example : --contributor user1,user2 -f, --filters [KEYWORDS] - Comma-separated keywords to filter the results by, such as 'user_input', 'association', or 'mac'. Example : --filters user_input,association,mac Output and Formats \uf0c1 -out, --outfile [FILEPATH] - Specify the file path for the output log. Cannot be a directory. Example : --outfile ./output.log -outformat, --output-format [FORMAT] - Set the format for the log file. Supported formats are html , text and json . Default is html . Example : --output-format json Debug \uf0c1 --debug - Enable Debug mode for a detailed and extensive output. Example : --debug","title":"Installing and Updating Gitxray"},{"location":"installing/#installing-and-updating-gitxray","text":"gitxray was written with no use of external package dependencies other than the requests library.","title":"Installing and Updating Gitxray"},{"location":"installing/#pypi-pip-way","text":"gitxray is on PyPI and can be installed and updated with: pip install gitxray --upgrade Once installed, simply run gitxray from your command line by typing: gitxray -o https://github.com/SampleOrg or gitxray -r https://github.com/SampleOrg/SampleRepo Including https://github.com/ in the Repository or Organization is optional.","title":"PyPI (PIP) Way"},{"location":"installing/#installing-from-source","text":"You may also run gitxray directly by cloning or downloading its GitHub repository and running: python3 -m pip install -r requirements.txt cd src/ python3 -m gitxray.gitxray","title":"Installing from source"},{"location":"installing/#creating-an-access-token-to-increase-rate-limits","text":"Gitxray gracefully handles Rate Limits and can work out of the box without a GitHub API token, but you'll likely hit RateLimits pretty fast (A small to medium-size repository with 10+ Contributors could take hours to complete while it waits for RateLimits to reset) This is detailed by GitHub in their documentation here . Creating a simple read-only token scoped to PUBLIC repositories will however help you increase those restrictions considerably. If you're not in a hurry or can leave gitxray running you'll be able to use its full capacity, as it pauses execution while waiting for the limits to lift. You may then load the token safely by using (prevents the token from being displayed on screen or getting logged in your shell history): read -rs GH_ACCESS_TOKEN export","title":"Creating an Access Token to increase Rate Limits"},{"location":"installing/#command-line-arguments","text":"","title":"Command Line Arguments"},{"location":"installing/#required-arguments","text":"One of the following must be specified: -r, --repository [URL] - Specify a single repository URL to check. The URL must begin with https:// . Example : --repository https://github.com/example/repo -rf, --repositories-file [FILEPATH] - Provide a file path containing a list of repositories, each on a new line. The file must exist. Example : --repositories-file ./list_of_repos.txt -o, --organization [URL] - Specify an organization URL to check all repositories under that organization. The URL must begin with https:// . Example : --organization https://github.com/exampleOrg","title":"Required Arguments"},{"location":"installing/#optional-arguments","text":"You'll find these optional but very handy in common gitxray usage. -l, --list - List contributors if a repository is specified or list repositories if an organization is specified. Useful for further focusing on specific entities. Example : --list -c, --contributor [USERNAMES] - A comma-separated list of GitHub usernames to focus on within the specified repository or organization. Example : --contributor user1,user2 -f, --filters [KEYWORDS] - Comma-separated keywords to filter the results by, such as 'user_input', 'association', or 'mac'. Example : --filters user_input,association,mac","title":"Optional Arguments"},{"location":"installing/#output-and-formats","text":"-out, --outfile [FILEPATH] - Specify the file path for the output log. Cannot be a directory. Example : --outfile ./output.log -outformat, --output-format [FORMAT] - Set the format for the log file. Supported formats are html , text and json . Default is html . Example : --output-format json","title":"Output and Formats"},{"location":"installing/#debug","text":"--debug - Enable Debug mode for a detailed and extensive output. Example : --debug","title":"Debug"},{"location":"show_love/","text":"Show your love \u2665 \uf0c1 If and only If gitxray has been helpful to you, your support in spreading the gitxray word is appreciated. Share on Twitter Share on LinkedIn - Write about your Gitxray experience And if you know of anyone looking for a Penetration Testing vendor, send them our way: Kulkan Security","title":"Show your love &hearts;"},{"location":"show_love/#show-your-love","text":"If and only If gitxray has been helpful to you, your support in spreading the gitxray word is appreciated. Share on Twitter Share on LinkedIn - Write about your Gitxray experience And if you know of anyone looking for a Penetration Testing vendor, send them our way: Kulkan Security","title":"Show your love &hearts;"},{"location":"vulnerable_workflows/","text":"Vulnerable Workflows \uf0c1 You may have landed here because Git X-Ray suggested that you further inspect a specific Workflow in a repository that you were X-Raying, or because of some other reason. Either way, here's a list of specialized software and documentation on how to proceed with analyzing the security of your workflow. Tools for Workflow analysis \uf0c1 https://github.com/synacktiv/octoscan - A SAST tool for GitHub Workflows. https://github.com/AdnaneKhan/Gato-X - Excellent for identifying at scale vulnerable Workflows. https://semgrep.dev/p/github-actions - Semgrep rules for GitHub Workflows. https://github.com/tindersec/gh-workflow-auditor - A script by Tinder Security which analyzes multiple aspects of a Workflow. Articles about GitHub Workflows and Security \uf0c1 Official by GitHub \uf0c1 https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/ https://securitylab.github.com/resources/github-actions-untrusted-input/ https://securitylab.github.com/resources/github-actions-building-blocks/ https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions By independent researchers and organizations \uf0c1 https://medium.com/tinder/exploiting-github-actions-on-open-source-projects-5d93936d189f OSSF: Mitigating Attack Vectors in GitHub Workflows Videos \uf0c1 https://www.youtube.com/watch?v=Ers-LcA7Nmc - A great video and slides by Rob Bos on GitHub Actions with security in mind","title":"Vulnerable Workflows"},{"location":"vulnerable_workflows/#vulnerable-workflows","text":"You may have landed here because Git X-Ray suggested that you further inspect a specific Workflow in a repository that you were X-Raying, or because of some other reason. Either way, here's a list of specialized software and documentation on how to proceed with analyzing the security of your workflow.","title":"Vulnerable Workflows"},{"location":"vulnerable_workflows/#tools-for-workflow-analysis","text":"https://github.com/synacktiv/octoscan - A SAST tool for GitHub Workflows. https://github.com/AdnaneKhan/Gato-X - Excellent for identifying at scale vulnerable Workflows. https://semgrep.dev/p/github-actions - Semgrep rules for GitHub Workflows. https://github.com/tindersec/gh-workflow-auditor - A script by Tinder Security which analyzes multiple aspects of a Workflow.","title":"Tools for Workflow analysis"},{"location":"vulnerable_workflows/#articles-about-github-workflows-and-security","text":"","title":"Articles about GitHub Workflows and Security"},{"location":"vulnerable_workflows/#official-by-github","text":"https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/ https://securitylab.github.com/resources/github-actions-untrusted-input/ https://securitylab.github.com/resources/github-actions-building-blocks/ https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions","title":"Official by GitHub"},{"location":"vulnerable_workflows/#by-independent-researchers-and-organizations","text":"https://medium.com/tinder/exploiting-github-actions-on-open-source-projects-5d93936d189f OSSF: Mitigating Attack Vectors in GitHub Workflows","title":"By independent researchers and organizations"},{"location":"vulnerable_workflows/#videos","text":"https://www.youtube.com/watch?v=Ers-LcA7Nmc - A great video and slides by Rob Bos on GitHub Actions with security in mind","title":"Videos"}]}